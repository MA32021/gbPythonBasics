# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере.
# Запрашивать у пользователя данные и заполнять список необходимо только числами.
# Класс-исключение должен контролировать типы данных элементов списка.
#
# Примечание: длина списка не фиксирована.
# Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта,
# введя, например, команду «stop». При этом скрипт завершается, сформированный список с числами выводится на экран.
#
# Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
# Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента.
# Вносить его в список, только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

import traceback


class NotNumberElement(Exception):
    def __init__(self, wrong_element=None):
        if wrong_element is None:
            wrong_element = ''
        self.err_msg = f'Элемент списка {wrong_element} не является числом!'
        super().__init__(self.err_msg)


def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False


Finish = False
some_list = []
while not Finish:
    try:
        new_el = input('Введите число для добавления в список или * выхода: ')
        if new_el == '*':
            Finish = True
            break
        if not is_number(new_el):
            raise NotNumberElement(new_el)
    except NotNumberElement:
        print(traceback.format_exc())
    else:
        some_list.append(float(new_el))

print(some_list)
